# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:58:06+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AcceptCode(RootModel[constr(pattern=r'^[0-9]*$', min_length=6, max_length=10)]):
    root: constr(pattern=r'^[0-9]*$', min_length=6, max_length=10)


class AcceptCodeValidation(Enum):
    IGNORE = 'IGNORE'
    ENFORCE = 'ENFORCE'


class AcceptPageResult(BaseModel):
    pass


class AcceptType(Enum):
    DELIVERED = 'DELIVERED'
    READ = 'READ'


class AccessDeniedException(RootModel[Any]):
    root: Any


class ActivateContactChannelResult(BaseModel):
    pass


class ActivationCode(
    RootModel[constr(pattern=r'^[0-9]*$', min_length=6, max_length=10)]
):
    root: constr(pattern=r'^[0-9]*$', min_length=6, max_length=10)


class ActivationStatus(Enum):
    ACTIVATED = 'ACTIVATED'
    NOT_ACTIVATED = 'NOT_ACTIVATED'


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class ChannelName(
    RootModel[constr(pattern=r'^[\p{L}\p{Z}\p{N}_.\-]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[\p{L}\p{Z}\p{N}_.\-]*$', min_length=1, max_length=255)


class ChannelType(Enum):
    SMS = 'SMS'
    VOICE = 'VOICE'
    EMAIL = 'EMAIL'


class ConflictException(RootModel[Any]):
    root: Any


class ContactAlias(
    RootModel[constr(pattern=r'^[a-z0-9_\-]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-z0-9_\-]*$', min_length=1, max_length=255)


class ContactName(
    RootModel[constr(pattern=r'^[\p{L}\p{Z}\p{N}_.\-]*$', min_length=0, max_length=255)]
):
    root: constr(pattern=r'^[\p{L}\p{Z}\p{N}_.\-]*$', min_length=0, max_length=255)


class ContactType(Enum):
    PERSONAL = 'PERSONAL'
    ESCALATION = 'ESCALATION'
    ONCALL_SCHEDULE = 'ONCALL_SCHEDULE'


class Content(RootModel[constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=8192)]):
    root: constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=8192)


class DataEncryptionException(RootModel[Any]):
    root: Any


class DateTime(RootModel[datetime]):
    root: datetime


class DayOfMonth(RootModel[conint(ge=1, le=31)]):
    root: conint(ge=1, le=31)


class DayOfWeek(Enum):
    MON = 'MON'
    TUE = 'TUE'
    WED = 'WED'
    THU = 'THU'
    FRI = 'FRI'
    SAT = 'SAT'
    SUN = 'SUN'


class DeactivateContactChannelResult(BaseModel):
    pass


class DeferActivation(RootModel[bool]):
    root: bool


class DeleteContactChannelResult(BaseModel):
    pass


class DeleteContactResult(BaseModel):
    pass


class DeleteRotationOverrideResult(BaseModel):
    pass


class DeleteRotationResult(BaseModel):
    pass


class HourOfDay(RootModel[conint(ge=0, le=23)]):
    root: conint(ge=0, le=23)


class IdempotencyToken(
    RootModel[constr(pattern=r'^[\\\/a-zA-Z0-9_+=\-]*$', max_length=2048)]
):
    root: constr(pattern=r'^[\\\/a-zA-Z0-9_+=\-]*$', max_length=2048)


class IncidentId(
    RootModel[constr(pattern=r'^[\\a-zA-Z0-9_@#%*+=:?.\/!\s-]*$', max_length=1024)]
):
    root: constr(pattern=r'^[\\a-zA-Z0-9_@#%*+=:?.\/!\s-]*$', max_length=1024)


class InternalServerException(RootModel[Any]):
    root: Any


class IsEssential(RootModel[bool]):
    root: bool


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class MaxResults(RootModel[conint(ge=0, le=1024)]):
    root: conint(ge=0, le=1024)


class Member(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=512)


class MinuteOfHour(RootModel[conint(ge=0, le=59)]):
    root: conint(ge=0, le=59)


class NumberOfOnCalls(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PaginationToken(
    RootModel[constr(pattern=r'^[\\\/a-zA-Z0-9_+=\-]*$', max_length=2048)]
):
    root: constr(pattern=r'^[\\\/a-zA-Z0-9_+=\-]*$', max_length=2048)


class Policy(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=395000)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=395000)


class PublicContent(
    RootModel[constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=8192)]
):
    root: constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=8192)


class PublicSubject(
    RootModel[constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=2048)


class PutContactPolicyResult(BaseModel):
    pass


class ReceiptInfo(
    RootModel[constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=2048)


class ReceiptType(Enum):
    DELIVERED = 'DELIVERED'
    ERROR = 'ERROR'
    READ = 'READ'
    SENT = 'SENT'
    STOP = 'STOP'


class RecurrenceMultiplier(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RetryIntervalInMinutes(RootModel[conint(ge=0, le=60)]):
    root: conint(ge=0, le=60)


class RotationName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-\s\.]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-\s\.]*$', min_length=1, max_length=255)


class RotationOverridePreviewMemberList(RootModel[List[Member]]):
    root: List[Member] = Field(..., max_length=30, min_length=0)


class RotationPreviewMemberList(RootModel[List[Member]]):
    root: List[Member] = Field(..., max_length=30, min_length=1)


class SendActivationCodeResult(BaseModel):
    pass


class Sender(
    RootModel[constr(pattern=r'^[\\a-zA-Z0-9_@#%*+=:?.\/!\s-]*$', max_length=255)]
):
    root: constr(pattern=r'^[\\a-zA-Z0-9_@#%*+=:?.\/!\s-]*$', max_length=255)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class ShiftType(Enum):
    REGULAR = 'REGULAR'
    OVERRIDDEN = 'OVERRIDDEN'


class SimpleAddress(RootModel[constr(min_length=1, max_length=320)]):
    root: constr(min_length=1, max_length=320)


class SsmContactsArn(
    RootModel[
        constr(
            pattern=r'arn:(aws|aws-cn|aws-us-gov):ssm-contacts:[-\w+=\/,.@]*:[0-9]+:([\w+=\/,.@:-]+)*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws|aws-cn|aws-us-gov):ssm-contacts:[-\w+=\/,.@]*:[0-9]+:([\w+=\/,.@:-]+)*',
        min_length=1,
        max_length=2048,
    )


class SsmContactsArnList(RootModel[List[SsmContactsArn]]):
    root: List[SsmContactsArn] = Field(..., max_length=25, min_length=0)


class StageDurationInMins(RootModel[conint(ge=0, le=30)]):
    root: conint(ge=0, le=30)


class StageIndex(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class StartEngagementResult(BaseModel):
    EngagementArn: SsmContactsArn


class StopEngagementResult(BaseModel):
    pass


class StopReason(RootModel[constr(pattern=r'^[.\s\S]*$', max_length=255)]):
    root: constr(pattern=r'^[.\s\S]*$', max_length=255)


class Subject(RootModel[constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=2048)]):
    root: constr(pattern=r'^[.\s\S]*$', min_length=1, max_length=2048)


class TagKey(
    RootModel[constr(pattern=r'^[\\\/a-zA-Z0-9_+=\-]*$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[\\\/a-zA-Z0-9_+=\-]*$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagResourceResult(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^[\p{L}\p{Z}\p{N}_.:\/=+\-@]*$', min_length=1, max_length=256)
    ]
):
    root: constr(
        pattern=r'^[\p{L}\p{Z}\p{N}_.:\/=+\-@]*$', min_length=1, max_length=256
    )


class ThrottlingException(RootModel[Any]):
    root: Any


class TimeRange(BaseModel):
    EndTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None


class TimeZoneId(
    RootModel[
        constr(pattern=r'^[:a-zA-Z0-9_\-\s\.\\/]*$', min_length=1, max_length=255)
    ]
):
    root: constr(pattern=r'^[:a-zA-Z0-9_\-\s\.\\/]*$', min_length=1, max_length=255)


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResult(BaseModel):
    pass


class UpdateContactChannelResult(BaseModel):
    pass


class UpdateContactResult(BaseModel):
    pass


class UpdateRotationResult(BaseModel):
    pass


class Uuid(
    RootModel[
        constr(
            pattern=r'([a-fA-Z0-9]{8,11}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}',
            min_length=36,
            max_length=39,
        )
    ]
):
    root: constr(
        pattern=r'([a-fA-Z0-9]{8,11}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}',
        min_length=36,
        max_length=39,
    )


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    SSMContacts_AcceptPage = 'SSMContacts.AcceptPage'


class XAmzTarget1(Enum):
    SSMContacts_ActivateContactChannel = 'SSMContacts.ActivateContactChannel'


class XAmzTarget2(Enum):
    SSMContacts_CreateContact = 'SSMContacts.CreateContact'


class XAmzTarget3(Enum):
    SSMContacts_CreateContactChannel = 'SSMContacts.CreateContactChannel'


class XAmzTarget4(Enum):
    SSMContacts_CreateRotation = 'SSMContacts.CreateRotation'


class XAmzTarget5(Enum):
    SSMContacts_CreateRotationOverride = 'SSMContacts.CreateRotationOverride'


class XAmzTarget6(Enum):
    SSMContacts_DeactivateContactChannel = 'SSMContacts.DeactivateContactChannel'


class XAmzTarget7(Enum):
    SSMContacts_DeleteContact = 'SSMContacts.DeleteContact'


class XAmzTarget8(Enum):
    SSMContacts_DeleteContactChannel = 'SSMContacts.DeleteContactChannel'


class XAmzTarget9(Enum):
    SSMContacts_DeleteRotation = 'SSMContacts.DeleteRotation'


class XAmzTarget10(Enum):
    SSMContacts_DeleteRotationOverride = 'SSMContacts.DeleteRotationOverride'


class XAmzTarget11(Enum):
    SSMContacts_DescribeEngagement = 'SSMContacts.DescribeEngagement'


class XAmzTarget12(Enum):
    SSMContacts_DescribePage = 'SSMContacts.DescribePage'


class XAmzTarget13(Enum):
    SSMContacts_GetContact = 'SSMContacts.GetContact'


class XAmzTarget14(Enum):
    SSMContacts_GetContactChannel = 'SSMContacts.GetContactChannel'


class XAmzTarget15(Enum):
    SSMContacts_GetContactPolicy = 'SSMContacts.GetContactPolicy'


class XAmzTarget16(Enum):
    SSMContacts_GetRotation = 'SSMContacts.GetRotation'


class XAmzTarget17(Enum):
    SSMContacts_GetRotationOverride = 'SSMContacts.GetRotationOverride'


class XAmzTarget18(Enum):
    SSMContacts_ListContactChannels = 'SSMContacts.ListContactChannels'


class XAmzTarget19(Enum):
    SSMContacts_ListContacts = 'SSMContacts.ListContacts'


class XAmzTarget20(Enum):
    SSMContacts_ListEngagements = 'SSMContacts.ListEngagements'


class XAmzTarget21(Enum):
    SSMContacts_ListPageReceipts = 'SSMContacts.ListPageReceipts'


class XAmzTarget22(Enum):
    SSMContacts_ListPageResolutions = 'SSMContacts.ListPageResolutions'


class XAmzTarget23(Enum):
    SSMContacts_ListPagesByContact = 'SSMContacts.ListPagesByContact'


class XAmzTarget24(Enum):
    SSMContacts_ListPagesByEngagement = 'SSMContacts.ListPagesByEngagement'


class XAmzTarget25(Enum):
    SSMContacts_ListPreviewRotationShifts = 'SSMContacts.ListPreviewRotationShifts'


class XAmzTarget26(Enum):
    SSMContacts_ListRotationOverrides = 'SSMContacts.ListRotationOverrides'


class XAmzTarget27(Enum):
    SSMContacts_ListRotationShifts = 'SSMContacts.ListRotationShifts'


class XAmzTarget28(Enum):
    SSMContacts_ListRotations = 'SSMContacts.ListRotations'


class XAmzTarget29(Enum):
    SSMContacts_ListTagsForResource = 'SSMContacts.ListTagsForResource'


class XAmzTarget30(Enum):
    SSMContacts_PutContactPolicy = 'SSMContacts.PutContactPolicy'


class XAmzTarget31(Enum):
    SSMContacts_SendActivationCode = 'SSMContacts.SendActivationCode'


class XAmzTarget32(Enum):
    SSMContacts_StartEngagement = 'SSMContacts.StartEngagement'


class XAmzTarget33(Enum):
    SSMContacts_StopEngagement = 'SSMContacts.StopEngagement'


class XAmzTarget34(Enum):
    SSMContacts_TagResource = 'SSMContacts.TagResource'


class XAmzTarget35(Enum):
    SSMContacts_UntagResource = 'SSMContacts.UntagResource'


class XAmzTarget36(Enum):
    SSMContacts_UpdateContact = 'SSMContacts.UpdateContact'


class XAmzTarget37(Enum):
    SSMContacts_UpdateContactChannel = 'SSMContacts.UpdateContactChannel'


class XAmzTarget38(Enum):
    SSMContacts_UpdateRotation = 'SSMContacts.UpdateRotation'


class AcceptPageRequest(BaseModel):
    AcceptCode_1: AcceptCode = Field(..., alias='AcceptCode')
    AcceptCodeValidation_1: Optional[AcceptCodeValidation] = Field(
        None, alias='AcceptCodeValidation'
    )
    AcceptType_1: AcceptType = Field(..., alias='AcceptType')
    ContactChannelId: Optional[SsmContactsArn] = None
    Note: Optional[ReceiptInfo] = None
    PageId: SsmContactsArn


class ActivateContactChannelRequest(BaseModel):
    ActivationCode_1: ActivationCode = Field(..., alias='ActivationCode')
    ContactChannelId: SsmContactsArn


class ChannelTargetInfo(BaseModel):
    ContactChannelId: SsmContactsArn
    RetryIntervalInMinutes_1: Optional[RetryIntervalInMinutes] = Field(
        None, alias='RetryIntervalInMinutes'
    )


class Contact(BaseModel):
    Alias: ContactAlias
    ContactArn: SsmContactsArn
    DisplayName: Optional[ContactName] = None
    Type: ContactType


class ContactChannelAddress(BaseModel):
    SimpleAddress_1: Optional[SimpleAddress] = Field(None, alias='SimpleAddress')


class ContactTargetInfo(BaseModel):
    ContactId: Optional[SsmContactsArn] = None
    IsEssential_1: IsEssential = Field(..., alias='IsEssential')


class ContactsList(RootModel[List[Contact]]):
    root: List[Contact]


class CreateContactChannelRequest(BaseModel):
    ContactId: SsmContactsArn
    DeferActivation_1: Optional[DeferActivation] = Field(None, alias='DeferActivation')
    DeliveryAddress: ContactChannelAddress
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    Name: ChannelName
    Type: ChannelType


class CreateContactChannelResult(BaseModel):
    ContactChannelArn: SsmContactsArn


class CreateContactResult(BaseModel):
    ContactArn: SsmContactsArn


class CreateRotationOverrideResult(BaseModel):
    RotationOverrideId: Uuid


class CreateRotationResult(BaseModel):
    RotationArn: SsmContactsArn


class DeactivateContactChannelRequest(BaseModel):
    ContactChannelId: SsmContactsArn


class DeleteContactChannelRequest(BaseModel):
    ContactChannelId: SsmContactsArn


class DeleteContactRequest(BaseModel):
    ContactId: SsmContactsArn


class DeleteRotationOverrideRequest(BaseModel):
    RotationId: SsmContactsArn
    RotationOverrideId: Uuid


class DeleteRotationRequest(BaseModel):
    RotationId: SsmContactsArn


class DescribeEngagementRequest(BaseModel):
    EngagementId: SsmContactsArn


class DescribeEngagementResult(BaseModel):
    ContactArn: SsmContactsArn
    Content_1: Content = Field(..., alias='Content')
    EngagementArn: SsmContactsArn
    IncidentId_1: Optional[IncidentId] = Field(None, alias='IncidentId')
    PublicContent_1: Optional[PublicContent] = Field(None, alias='PublicContent')
    PublicSubject_1: Optional[PublicSubject] = Field(None, alias='PublicSubject')
    Sender_1: Sender = Field(..., alias='Sender')
    StartTime: Optional[DateTime] = None
    StopTime: Optional[DateTime] = None
    Subject_1: Subject = Field(..., alias='Subject')


class DescribePageRequest(BaseModel):
    PageId: SsmContactsArn


class DescribePageResult(BaseModel):
    ContactArn: SsmContactsArn
    Content_1: Content = Field(..., alias='Content')
    DeliveryTime: Optional[DateTime] = None
    EngagementArn: SsmContactsArn
    IncidentId_1: Optional[IncidentId] = Field(None, alias='IncidentId')
    PageArn: SsmContactsArn
    PublicContent_1: Optional[PublicContent] = Field(None, alias='PublicContent')
    PublicSubject_1: Optional[PublicSubject] = Field(None, alias='PublicSubject')
    ReadTime: Optional[DateTime] = None
    Sender_1: Sender = Field(..., alias='Sender')
    SentTime: Optional[DateTime] = None
    Subject_1: Subject = Field(..., alias='Subject')


class Engagement(BaseModel):
    ContactArn: SsmContactsArn
    EngagementArn: SsmContactsArn
    IncidentId_1: Optional[IncidentId] = Field(None, alias='IncidentId')
    Sender_1: Sender = Field(..., alias='Sender')
    StartTime: Optional[DateTime] = None
    StopTime: Optional[DateTime] = None


class EngagementsList(RootModel[List[Engagement]]):
    root: List[Engagement]


class GetContactChannelRequest(BaseModel):
    ContactChannelId: SsmContactsArn


class GetContactChannelResult(BaseModel):
    ActivationStatus_1: Optional[ActivationStatus] = Field(
        None, alias='ActivationStatus'
    )
    ContactArn: SsmContactsArn
    ContactChannelArn: SsmContactsArn
    DeliveryAddress: ContactChannelAddress
    Name: ChannelName
    Type: ChannelType


class GetContactPolicyRequest(BaseModel):
    ContactArn: SsmContactsArn


class GetContactPolicyResult(BaseModel):
    ContactArn: Optional[SsmContactsArn] = None
    Policy_1: Optional[Policy] = Field(None, alias='Policy')


class GetContactRequest(BaseModel):
    ContactId: SsmContactsArn


class GetRotationOverrideRequest(BaseModel):
    RotationId: SsmContactsArn
    RotationOverrideId: Uuid


class GetRotationOverrideResult(BaseModel):
    CreateTime: Optional[DateTime] = None
    EndTime: Optional[DateTime] = None
    NewContactIds: Optional[SsmContactsArnList] = None
    RotationArn: Optional[SsmContactsArn] = None
    RotationOverrideId: Optional[Uuid] = None
    StartTime: Optional[DateTime] = None


class GetRotationRequest(BaseModel):
    RotationId: SsmContactsArn


class HandOffTime(BaseModel):
    HourOfDay_1: HourOfDay = Field(..., alias='HourOfDay')
    MinuteOfHour_1: MinuteOfHour = Field(..., alias='MinuteOfHour')


class ListContactChannelsRequest(BaseModel):
    ContactId: SsmContactsArn
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class ListContactsRequest(BaseModel):
    AliasPrefix: Optional[ContactAlias] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    Type: Optional[ContactType] = None


class ListContactsResult(BaseModel):
    Contacts: Optional[ContactsList] = None
    NextToken: Optional[PaginationToken] = None


class ListEngagementsRequest(BaseModel):
    IncidentId_1: Optional[IncidentId] = Field(None, alias='IncidentId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    TimeRangeValue: Optional[TimeRange] = None


class ListEngagementsResult(BaseModel):
    Engagements: EngagementsList
    NextToken: Optional[PaginationToken] = None


class ListPageReceiptsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    PageId: SsmContactsArn


class ListPageResolutionsRequest(BaseModel):
    NextToken: Optional[PaginationToken] = None
    PageId: SsmContactsArn


class ListPagesByContactRequest(BaseModel):
    ContactId: SsmContactsArn
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class ListPagesByEngagementRequest(BaseModel):
    EngagementId: SsmContactsArn
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None


class ListRotationOverridesRequest(BaseModel):
    EndTime: DateTime
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    RotationId: SsmContactsArn
    StartTime: DateTime


class ListRotationShiftsRequest(BaseModel):
    EndTime: DateTime
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    RotationId: SsmContactsArn
    StartTime: Optional[DateTime] = None


class ListRotationsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[PaginationToken] = None
    RotationNamePrefix: Optional[RotationName] = None


class MonthlySetting(BaseModel):
    DayOfMonth_1: DayOfMonth = Field(..., alias='DayOfMonth')
    HandOffTime_1: HandOffTime = Field(..., alias='HandOffTime')


class MonthlySettings(RootModel[List[MonthlySetting]]):
    root: List[MonthlySetting]


class Page(BaseModel):
    ContactArn: SsmContactsArn
    DeliveryTime: Optional[DateTime] = None
    EngagementArn: SsmContactsArn
    IncidentId_1: Optional[IncidentId] = Field(None, alias='IncidentId')
    PageArn: SsmContactsArn
    ReadTime: Optional[DateTime] = None
    Sender_1: Sender = Field(..., alias='Sender')
    SentTime: Optional[DateTime] = None


class PagesList(RootModel[List[Page]]):
    root: List[Page]


class PreviewOverride(BaseModel):
    EndTime: Optional[DateTime] = None
    NewMembers: Optional[RotationOverridePreviewMemberList] = None
    StartTime: Optional[DateTime] = None


class PutContactPolicyRequest(BaseModel):
    ContactArn: SsmContactsArn
    Policy_1: Policy = Field(..., alias='Policy')


class Receipt(BaseModel):
    ContactChannelArn: Optional[SsmContactsArn] = None
    ReceiptInfo_1: Optional[ReceiptInfo] = Field(None, alias='ReceiptInfo')
    ReceiptTime: DateTime
    ReceiptType_1: ReceiptType = Field(..., alias='ReceiptType')


class ReceiptsList(RootModel[List[Receipt]]):
    root: List[Receipt]


class ResolutionContact(BaseModel):
    ContactArn: SsmContactsArn
    StageIndex_1: Optional[StageIndex] = Field(None, alias='StageIndex')
    Type: ContactType


class ResolutionList(RootModel[List[ResolutionContact]]):
    root: List[ResolutionContact]


class RotationContactsArnList(RootModel[List[SsmContactsArn]]):
    root: List[SsmContactsArn] = Field(..., max_length=30, min_length=1)


class RotationOverride(BaseModel):
    CreateTime: DateTime
    EndTime: DateTime
    NewContactIds: SsmContactsArnList
    RotationOverrideId: Uuid
    StartTime: DateTime


class RotationOverrideContactsArnList(RootModel[List[SsmContactsArn]]):
    root: List[SsmContactsArn] = Field(..., max_length=30, min_length=0)


class RotationOverrides(RootModel[List[RotationOverride]]):
    root: List[RotationOverride]


class SendActivationCodeRequest(BaseModel):
    ContactChannelId: SsmContactsArn


class ShiftDetails(BaseModel):
    OverriddenContactIds: SsmContactsArnList


class StartEngagementRequest(BaseModel):
    ContactId: SsmContactsArn
    Content_1: Content = Field(..., alias='Content')
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    IncidentId_1: Optional[IncidentId] = Field(None, alias='IncidentId')
    PublicContent_1: Optional[PublicContent] = Field(None, alias='PublicContent')
    PublicSubject_1: Optional[PublicSubject] = Field(None, alias='PublicSubject')
    Sender_1: Sender = Field(..., alias='Sender')
    Subject_1: Subject = Field(..., alias='Subject')


class StopEngagementRequest(BaseModel):
    EngagementId: SsmContactsArn
    Reason: Optional[StopReason] = None


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagsList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=0)


class Target(BaseModel):
    ChannelTargetInfo_1: Optional[ChannelTargetInfo] = Field(
        None, alias='ChannelTargetInfo'
    )
    ContactTargetInfo_1: Optional[ContactTargetInfo] = Field(
        None, alias='ContactTargetInfo'
    )


class TargetsList(RootModel[List[Target]]):
    root: List[Target]


class UpdateContactChannelRequest(BaseModel):
    ContactChannelId: SsmContactsArn
    DeliveryAddress: Optional[ContactChannelAddress] = None
    Name: Optional[ChannelName] = None


class WeeklySetting(BaseModel):
    DayOfWeek_1: DayOfWeek = Field(..., alias='DayOfWeek')
    HandOffTime_1: HandOffTime = Field(..., alias='HandOffTime')


class WeeklySettings(RootModel[List[WeeklySetting]]):
    root: List[WeeklySetting]


class ContactChannel(BaseModel):
    ActivationStatus_1: ActivationStatus = Field(..., alias='ActivationStatus')
    ContactArn: SsmContactsArn
    ContactChannelArn: SsmContactsArn
    DeliveryAddress: ContactChannelAddress
    Name: ChannelName
    Type: Optional[ChannelType] = None


class ContactChannelList(RootModel[List[ContactChannel]]):
    root: List[ContactChannel]


class CoverageTime(BaseModel):
    End: Optional[HandOffTime] = None
    Start: Optional[HandOffTime] = None


class CoverageTimes(RootModel[List[CoverageTime]]):
    root: List[CoverageTime]


class CreateRotationOverrideRequest(BaseModel):
    EndTime: DateTime
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    NewContactIds: RotationOverrideContactsArnList
    RotationId: SsmContactsArn
    StartTime: DateTime


class DailySettings(RootModel[List[HandOffTime]]):
    root: List[HandOffTime]


class ListContactChannelsResult(BaseModel):
    ContactChannels: ContactChannelList
    NextToken: Optional[PaginationToken] = None


class ListPageReceiptsResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Receipts: Optional[ReceiptsList] = None


class ListPageResolutionsResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    PageResolutions: ResolutionList


class ListPagesByContactResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Pages: PagesList


class ListPagesByEngagementResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Pages: PagesList


class ListRotationOverridesResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    RotationOverrides_1: Optional[RotationOverrides] = Field(
        None, alias='RotationOverrides'
    )


class ListTagsForResourceResult(BaseModel):
    Tags: Optional[TagsList] = None


class OverrideList(RootModel[List[PreviewOverride]]):
    root: List[PreviewOverride]


class RotationShift(BaseModel):
    ContactIds: Optional[SsmContactsArnList] = None
    EndTime: DateTime
    ShiftDetails_1: Optional[ShiftDetails] = Field(None, alias='ShiftDetails')
    StartTime: DateTime
    Type: Optional[ShiftType] = None


class RotationShifts(RootModel[List[RotationShift]]):
    root: List[RotationShift]


class ShiftCoveragesMap(RootModel[Optional[Dict[str, CoverageTimes]]]):
    root: Optional[Dict[str, CoverageTimes]] = None


class Stage(BaseModel):
    DurationInMinutes: StageDurationInMins
    Targets: TargetsList


class StagesList(RootModel[List[Stage]]):
    root: List[Stage]


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagsList


class ListPreviewRotationShiftsResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    RotationShifts_1: Optional[RotationShifts] = Field(None, alias='RotationShifts')


class ListRotationShiftsResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    RotationShifts_1: Optional[RotationShifts] = Field(None, alias='RotationShifts')


class Plan(BaseModel):
    RotationIds: Optional[SsmContactsArnList] = None
    Stages: Optional[StagesList] = None


class RecurrenceSettings(BaseModel):
    DailySettings_1: Optional[DailySettings] = Field(None, alias='DailySettings')
    MonthlySettings_1: Optional[MonthlySettings] = Field(None, alias='MonthlySettings')
    NumberOfOnCalls_1: NumberOfOnCalls = Field(..., alias='NumberOfOnCalls')
    RecurrenceMultiplier_1: RecurrenceMultiplier = Field(
        ..., alias='RecurrenceMultiplier'
    )
    ShiftCoverages: Optional[ShiftCoveragesMap] = None
    WeeklySettings_1: Optional[WeeklySettings] = Field(None, alias='WeeklySettings')


class Rotation(BaseModel):
    ContactIds: Optional[SsmContactsArnList] = None
    Name: RotationName
    Recurrence: Optional[RecurrenceSettings] = None
    RotationArn: SsmContactsArn
    StartTime: Optional[DateTime] = None
    TimeZoneId_1: Optional[TimeZoneId] = Field(None, alias='TimeZoneId')


class Rotations(RootModel[List[Rotation]]):
    root: List[Rotation]


class UpdateContactRequest(BaseModel):
    ContactId: SsmContactsArn
    DisplayName: Optional[ContactName] = None
    Plan_1: Optional[Plan] = Field(None, alias='Plan')


class UpdateRotationRequest(BaseModel):
    ContactIds: Optional[RotationContactsArnList] = None
    Recurrence: RecurrenceSettings
    RotationId: SsmContactsArn
    StartTime: Optional[DateTime] = None
    TimeZoneId_1: Optional[TimeZoneId] = Field(None, alias='TimeZoneId')


class CreateContactRequest(BaseModel):
    Alias: ContactAlias
    DisplayName: Optional[ContactName] = None
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    Plan_1: Plan = Field(..., alias='Plan')
    Tags: Optional[TagsList] = None
    Type: ContactType


class CreateRotationRequest(BaseModel):
    ContactIds: RotationContactsArnList
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    Name: RotationName
    Recurrence: RecurrenceSettings
    StartTime: Optional[DateTime] = None
    Tags: Optional[TagsList] = None
    TimeZoneId_1: TimeZoneId = Field(..., alias='TimeZoneId')


class GetContactResult(BaseModel):
    Alias: ContactAlias
    ContactArn: SsmContactsArn
    DisplayName: Optional[ContactName] = None
    Plan_1: Plan = Field(..., alias='Plan')
    Type: ContactType


class GetRotationResult(BaseModel):
    ContactIds: RotationContactsArnList
    Name: RotationName
    Recurrence: RecurrenceSettings
    RotationArn: SsmContactsArn
    StartTime: DateTime
    TimeZoneId_1: TimeZoneId = Field(..., alias='TimeZoneId')


class ListPreviewRotationShiftsRequest(BaseModel):
    EndTime: DateTime
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    Members: RotationPreviewMemberList
    NextToken: Optional[PaginationToken] = None
    Overrides: Optional[OverrideList] = None
    Recurrence: RecurrenceSettings
    RotationStartTime: Optional[DateTime] = None
    StartTime: Optional[DateTime] = None
    TimeZoneId_1: TimeZoneId = Field(..., alias='TimeZoneId')


class ListRotationsResult(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Rotations_1: Rotations = Field(..., alias='Rotations')
